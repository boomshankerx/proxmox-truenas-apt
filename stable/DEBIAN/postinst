#!/bin/bash
# Abort if any command returns an error value
set -e

# Debug variable - Values "on" or "off"
_DEBUG="on"

# Setup some variables so we are not duping the paths
FILE_APIDOC="/pve-docs/api-viewer/apidoc.js"
FILE_PVEMANAGER="/pve-manager/js/pvemanagerlib.js"
FILE_TRUENAS="/perl5/PVE/Storage/LunCmd/TrueNAS.pm"
FILE_ZFSPLUGIN="/perl5/PVE/Storage/ZFSPlugin.pm"
GIT_BRANCH="main"
GIT_REPO_PATH="/usr/local/src/"
GIT_REPO_NAME="proxmox-truenas"
GIT_REPO_URL="https://github.com/boomshankerx/"
PATH_CLIENT="/perl5/TrueNAS"
PATH_LIB="/usr/share"
RESTART_PVE_SERVICES="no"

[ "${_DEBUG}" == "on" ] && PATCH_ARGS="--verbose -b --ignore-whitespace" || PATCH_ARGS="-s -b --ignore-whitespace"

# Get some version numbers of the Proxmox packages
ver_storage=$(dpkg-query --showformat='${Version}' --show libpve-storage-perl)
ver_manager=$(dpkg-query --showformat='${Version}' --show pve-manager)
ver_proxmox=$(dpkg-query --showformat='${Version}' --show proxmox-ve)
ver_major=${ver_proxmox%%.*}

echo "Proxmox Version $ver_proxmox"
echo "Proxmox Major Version $ver_major"
echo "Proxmox Storage Version $ver_storage"
echo "Proxmox Manager Version $ver_manager"

# Test if the truenas-proxmox repo has been downloaded. If not clone it, else
# update the repo with a pull.
if test ! -e ${GIT_REPO_PATH}${GIT_REPO_NAME}; then
  echo "Cloning proxmox-truenas github repo"
  git -C ${GIT_REPO_PATH} clone ${GIT_REPO_URL}${GIT_REPO_NAME}.git
else
  echo "Pulling proxmox-truenas github repo"
  git -C ${GIT_REPO_PATH}${GIT_REPO_NAME} pull
fi

# What is the 'postinst' script doing...
case "$1" in
  triggered)
    for fullpath in $paths
    do
      filename=$(basename -- "$fullpath")
      filename="${filename%.*}"
      echo "Found $fullpath in arguments. Triggering patch of $fullpath"
      case "$filename" in
        ZFSPlugin)
          patch ${PATCH_ARGS} ${PATH_LIB}${FILE_ZFSPLUGIN} < ${GIT_REPO_PATH}${GIT_REPO_NAME}${FILE_ZFSPLUGIN}.${ver_major}.patch &> /dev/null
          ;;
        pvemanagerlib)
          patch ${PATCH_ARGS} ${PATH_LIB}${FILE_PVEMANAGER} < ${GIT_REPO_PATH}${GIT_REPO_NAME}${FILE_PVEMANAGER}.${ver_major}.patch &> /dev/null
          ;;
      esac
    done
    echo "Installing ${PATH_LIB}${FILE_TRUENAS}"
    cp ${GIT_REPO_PATH}${GIT_REPO_NAME}${FILE_TRUENAS} ${PATH_LIB}${FILE_TRUENAS}
    cp -r ${GIT_REPO_PATH}${GIT_REPO_NAME}${PATH_CLIENT} ${PATH_LIB}/perl5

    exit 0
    ;;

  configure)
    echo "Configuring ${GIT_REPO_NAME}"

    # Check to see what branch we are on and change if necessary.
    GIT_BRANCH_CURRENT=$(git -C ${GIT_REPO_PATH}${GIT_REPO_NAME} rev-parse --abbrev-ref HEAD)
    if [ "${GIT_BRANCH_CURRENT}" != "${GIT_BRANCH}" ]; then
      git -C ${GIT_REPO_PATH}${GIT_REPO_NAME} checkout ${GIT_BRANCH}
    fi

    # Check /usr/share/perl5/PVE/Storage/ZFSPlugin.pm
    if [ $(cat ${PATH_LIB}${FILE_ZFSPLUGIN} | grep -c "truenas") -eq 0 ]; then
      echo "Patching ${PATH_LIB}${FILE_ZFSPLUGIN}"
      patch ${PATCH_ARGS} ${PATH_LIB}${FILE_ZFSPLUGIN} < ${GIT_REPO_PATH}${GIT_REPO_NAME}${FILE_ZFSPLUGIN}.${ver_major}.patch &> /dev/null
      RESTART_PVE_SERVICES="yes"
    fi

    # Check /usr/share/pve-manager/js/pvemanagerlib.js
    if [ $(cat ${PATH_LIB}${FILE_PVEMANAGER} | grep -c "truenas") -eq 0 ]; then
      echo "Patching ${PATH_LIB}${FILE_PVEMANAGER}"
      patch ${PATCH_ARGS} ${PATH_LIB}${FILE_PVEMANAGER} < ${GIT_REPO_PATH}${GIT_REPO_NAME}${FILE_PVEMANAGER}.${ver_major}.patch &> /dev/null
      RESTART_PVE_SERVICES="yes"
    fi

    # Check /usr/share/perl5/PVE/Storage/LunCmd/TrueNAS.pm
    if test ! -e ${PATH_LIB}${FILE_TRUENAS}; then
      echo "Installing ${PATH_LIB}${FILE_TRUENAS}"
      cp ${GIT_REPO_PATH}${GIT_REPO_NAME}${FILE_TRUENAS} ${PATH_LIB}${FILE_TRUENAS}
      cp -r ${GIT_REPO_PATH}${GIT_REPO_NAME}${PATH_CLIENT} ${PATH_LIB}/perl5
      RESTART_PVE_SERVICES="yes"
    fi

    # Restart the necessary Proxmox VE Services if we changed any files above.
    if [ "${RESTART_PVE_SERVICES}" == "yes" ]; then
      echo "Restarting pvedaemon..."
      pvedaemon restart
      echo "Restarting pveproxy..."
      pveproxy restart
      echo "Restarting pvestatd..."
      pvestatd restart
      echo "Restarting pvescheduler..."
      systemctl restart pvescheduler.service
      echo "Restarting HA Services"
      systemctl restart pve-ha-crm.service pve-ha-lrm.service
    fi
    exit 0
    ;;

  abort-upgrade|abort-remove|abort-deconfigure)
    ;;

  *) echo "$0: didn't understand being called with \`$1'" 1>&2
     exit 0
     ;;
esac

exit 0
